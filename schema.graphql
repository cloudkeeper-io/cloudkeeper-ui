# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type DashboardDynamoData {
    last24Hours: DashboardDynamoDataForPeriod
    last30Days: DashboardDynamoDataForPeriod
    processing: Boolean
}

type DashboardDynamoDataForPeriod {
    mostExpensiveTables: [MostExpensiveTableData]
    mostReadTables: [MostReadTableData]
    mostThrottledTables: [MostThrottledTableData]
    mostWritesTables: [MostWritesTableData]
}

type DashboardLambdaDataForPeriod {
    mostErrorsLambdas: [MostErrorsLambdaData]
    mostExpensiveLambdas: [MostExpensiveLambdaData]
    mostInvokedLambdas: [MostInvokedLambdaData]
    slowestLambdas: [SlowLambdaData]
    totals: Totals
}

type DashboardLambdasData {
    last24Hours: DashboardLambdaDataForPeriod
    last30Days: DashboardLambdaDataForPeriod
    processing: Boolean
}

type IntegrationData {
    functions: Int
    status: String
}

type MostErrorsLambdaData {
    codeSize: Int
    dataPoints: [MostErrorsLambdaDataPoint]
    errorRate: Float
    errors: Int
    lambdaName: String
    region: String
    runtime: String
    size: Int
    timeout: Int
}

type MostErrorsLambdaDataPoint {
    dateTime: String
    errors: Int
}

type MostExpensiveLambdaData {
    codeSize: Int
    cost: Float
    dataPoints: [MostExpensiveLambdaDataPoint]
    lambdaName: String
    region: String
    runtime: String
    size: Int
    timeout: Int
}

type MostExpensiveLambdaDataPoint {
    cost: Float
    dateTime: String
}

type MostExpensiveTableData {
    billingMode: String
    dataPoints: [MostExpensiveTableDataPoint]
    items: Int
    name: String
    readPrice: Float
    region: String
    sizeBytes: Int
    storagePrice: Float
    totalPrice: Float
    writePrice: Float
}

type MostExpensiveTableDataPoint {
    dateTime: String
    readPrice: Float
    storagePrice: Float
    totalPrice: Float
    writePrice: Float
}

type MostInvokedLambdaData {
    codeSize: Int
    dataPoints: [MostInvokedLambdaDataPoint]
    invocations: Int
    invocationsPerSecond: Float
    lambdaName: String
    region: String
    runtime: String
    size: Int
    timeout: Int
}

type MostInvokedLambdaDataPoint {
    dateTime: String
    invocations: Int
}

type MostReadTableData {
    averageConsumedRead: Float
    billingMode: String
    consumedRead: Int
    dataPoints: [MostReadTableDataPoint]
    items: Int
    name: String
    provisionedRead: Int
    region: String
    sizeBytes: Int
}

type MostReadTableDataPoint {
    consumedRead: Int
    dateTime: String
    provisionedRead: Int
}

type MostThrottledTableData {
    billingMode: String
    dataPoints: [MostThrottledTableDataPoint]
    items: Int
    name: String
    region: String
    sizeBytes: Int
    throttledReads: Int
    throttledRequests: Int
    throttledWrites: Int
}

type MostThrottledTableDataPoint {
    dateTime: String
    throttledReads: Int
    throttledRequests: Int
    throttledWrites: Int
}

type MostWritesTableData {
    averageConsumedWrite: Float
    billingMode: String
    consumedWrite: Int
    dataPoints: [MostWritesTableDataPoint]
    items: Int
    name: String
    provisionedWrite: Int
    region: String
    sizeBytes: Int
}

type MostWritesTableDataPoint {
    consumedWrite: Int
    dateTime: String
    provisionedWrite: Int
}

type Mutation {
    createTenant(name: String!): Tenant
    deleteTenant(id: String!): Tenant
    setupTenant(roleArn: String!, tenantId: String!): IntegrationData
}

type Query {
    awsRegions: [String]
    dynamoData(tenantId: String): DashboardDynamoData
    lambdasData(tenantId: String): DashboardLambdasData
    tenants: [Tenant]
}

type SlowLambdaData {
    averageDuration: Float
    codeSize: Int
    dataPoints: [SlowLambdaDataPoint]
    lambdaName: String
    maxDuration: Float
    region: String
    runtime: String
    size: Int
    timeout: Int
}

type SlowLambdaDataPoint {
    averageDuration: Float
    dateTime: String
    maxDuration: Float
}

type Tenant {
    createdAt: String
    id: String
    isSetupCompleted: Boolean
    name: String
}

type Totals {
    cost: Float
    dataPoints: [TotalsDataPoint]
    errors: Int
    invocations: Int
}

type TotalsDataPoint {
    cost: Float
    dateTime: String
    errors: Int
    invocations: Int
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
